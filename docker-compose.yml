version: '3.8'

services:
  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_DB: poe2_korean_app
      POSTGRES_USER: poe2_admin
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_123}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - poe2_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U poe2_admin -d poe2_korean_app"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Next.js 앱
  app:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://poe2_admin:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/poe2_korean_app
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-your-secret-key-here}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
    networks:
      - poe2_network

  # n8n 자동화 시스템
  n8n:
    image: n8nio/n8n:latest
    restart: always
    ports:
      - "5678:5678"
    environment:
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: n8n
      DB_POSTGRESDB_USER: poe2_admin
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_123}
      N8N_BASIC_AUTH_ACTIVE: true
      N8N_BASIC_AUTH_USER: ${N8N_USER:-admin}
      N8N_BASIC_AUTH_PASSWORD: ${N8N_PASSWORD:-n8n_admin_123}
      WEBHOOK_URL: http://localhost:5678/
      GENERIC_TIMEZONE: Asia/Seoul
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n/workflows:/home/node/.n8n/workflows
    networks:
      - poe2_network

  # Redis (캐시 및 세션 관리)
  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_123}
    volumes:
      - redis_data:/data
    networks:
      - poe2_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Nginx 리버스 프록시 (선택적)
  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - app
      - n8n
    networks:
      - poe2_network

volumes:
  postgres_data:
  n8n_data:
  redis_data:

networks:
  poe2_network:
    driver: bridge